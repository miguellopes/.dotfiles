export OPENSSL=`which openssl`

#funcoes
function httpmetrics () {
   curl -s -I http://$1/
   curl -s -w '\nDNS    :\t%{time_namelookup}\nConnect time:\t%{time_connect}\nAppCon time:\t%{time_appconnect}\nRedirect time:\t%{time_redirect}\nPreXfer time:\t%{time_pretransfer}\nStartXfer time:\t%{time_starttransfer}\n\nTotal time:\t%{time_total}\n' -o /dev/null http://$1/ 2>1
   sleep 1
}

function httpsmetrics () {
   curl -s -I https://$1/
   curl -s -w '\nDNS    :\t%{time_namelookup}\nConnect time:\t%{time_connect}\nAppCon time:\t%{time_appconnect}\nRedirect time:\t%{time_redirect}\nPreXfer time:\t%{time_pretransfer}\nStartXfer time:\t%{time_starttransfer}\n\nTotal time:\t%{time_total}\n' -o /dev/null http://$1/ 2>1
   sleep 1
}

function httpmethods () {
#TODO: silencio opcional e https
   metodos=("HEAD" "PUT" "PROPATCH" "TRACE" "PROFIND" "DEBUG" "OPTIONS" "CONNECT" "TRACK" "COPY" "LOCK" "MOVE" "PATCH" "MKCOL" "UNLOCK" "XRAND")
   for i in $metodos
   do
      _con $i $1
   done
}

function _con () {
   echo "Metodo $1"
   curl -o /dev/null -w "%{http_code}\n" -d "" -s -0 -A "webcheck-harmless" -v -X $1 https://$2/ 
   read $t\?
}

function __dw() {

   echo -n | $OPENSSL s_client -connect $IP:443 </dev/null 2>/dev/null | $OPENSSL x509 -outform PEM > ./certs/$IP.pem &
}

function greptld() {
   egrep -oh  '(\.)[a-z-]{1,}\.([a-z]{2,3}|[a-z]{2,3}\.[a-z]{2,3})\.$' $1 | sed -e 's/^\.//' | sed -e 's/\.$//' | sort -u
}

function gtld() {
   egrep -oh  '\.[a-z-]{1,}\.([a-z]{2,3}|[a-z]{2,3}\.[a-z]{2,3})' $1 | sed -e 's/^\.//' | sort -u
}

function greptlds() {
   egrep -oh  '[a-z-]{1,}\.([a-z]{2,3}|[a-z]{2,3}\.[a-z]{2,3})$' $1 | sed -e 's/^\.//'  | sort -u
}
function dwcert () {
   IP=$1
   #$(nslookup $1 | grep Address | grep -v "#" | cut -d" " -f2)
   RDNS=`rdns $IP`
   echo "$IP $RDNS"
   __dw $IP
}

function sslcn () {
   IP=$1
   #$(nslookup $1 | grep Address | grep -v "#" | cut -d" " -f2)
   echo "\n\n" | $OPENSSL s_client -connect $IP:443 -crlf </dev/null 2>/dev/null | $OPENSSL x509 -text | grep DNS | awk '{n=split($0, a, ","); for (i=1; i<=n; i++) {gsub(/[ \t|DNS:]/, "", a[i]); print a[i]}}'
}

function bsslcn () {
   for i in `cat $1`
   do
      sslcn $i
   done
}
function read_cert () {
   $OPENSSL x509 -in $1 -text
}

function read_cert_dns () {
   $OPENSSL x509 -in $1 -text | grep DNS | awk '{n=split($0, a, ","); for (i=1; i<=n; i++) {gsub(/[ \t|DNS:]/, "", a[i]); print a[i]}}'

}

function massdnsxtract () {
   for i in `find $1 -not -empty`
   do
      read_cert_dns $i
      #2>1
   done
}

function netscan () {
   __zmap $1 $2 $3
   __nmap $1 $2
}

function __zmap () {
   if [ -z "$3" ]
   then
      sudo zmap -p $2 -w $1 -o "$2.$1" -r 700 -c 2
   else
      sudo zmap -p $2 -w $1 -o "$2.$1" -r $3 -c 2
   fi

}

function __nmap () {

   sudo nmap -sSV -Pn -open -T3 -iL "$2.$1" -n -p $2 --max-retries 3 --max-rtt-timeout 400ms --defeat-rst-ratelimit -vv -oG "$2.gnmap"

}
function masscertdw () {

   if [ ! -d ./certs/ ]
   then
      mkdir -p certs
   fi

   for i in `cat $1`
   do
      dwcert $i &
      sleep 0.1
   done
}
function massrdns () {

   if [ -z "$2" ]
   then
      cat $1 | parallel -j300 -k --progress dig +noall +answer -x {} >> $1.rdns
   else
      cat $1 | parallel -j300 -k --progress dig @$2 +noall +answer -x {} >> $1.rdns

   fi
}
function massgtld () {
   touch vhosts_tld
   for i in `ls -1 $1 | grep -v "axfr"`
   do
      gtld $i >> vhosts_tld &
      sleep 0.1
   done
}

function massaxfr () {
   mkdir -p dns
   for i in `cat $1`
   do
      zonetransfer $i > "./dns/$i.axfr" &
      sleep 0.5
   done
}

function masssnmp() {
   for i in `cat $1`
   do
      snmpwalk -v1 -c public $i | grep -v "Timeout" >> "$1.snmpwalk" &
      sleep 0.1
   done
}

function massvh2() {
   mkdir -p vhosts
   local PD=`pwd`
   for i in `cat $1`
   do
      theharvester -l 1500 -b bing -v -f "$PD/vhosts/$i.html" -d $i &
      sleep 5
   done
}

function massvh() {
   mkdir -p vhosts
   for i in `ls -1 $1 | sed -e 's/\.axfr//'`
   do
      theharvester -l 1500 -b bing -v -f "./vhosts/$i" -d $i &
      sleep 7
   done
}

function yay() {
   mkdir -p own
   mv `grep "Zone Transfer was " ./*.axfr | cut -d":" -f1` ./own
}

function __rdns() {
      local AS=`dig +short -x $1`
      if [ -z "$AS" ]
      then
         return false
      else
         echo "$AS"
         return true
      fi
}

say() { if [[ "${1}" =~ -[a-z]{2} ]]; then local lang=${1#-}; local text="${*#$1}"; else local lang=${LANG%_*}; local text="$*";fi; mplayer "http://translate.google.com/translate_tts?ie=UTF-8&tl=${lang}&q=${text}" &> /dev/null ; }


function wifimac () {
   echo "From $(ifconfig en1 |grep ether | tr -d '\t')"
   MAC=$($OPENSSL rand -hex 6 | sed 's/\(..\)/\1:/g; s/.$//')
   sudo ifconfig en1 ether $MAC
   sleep 1
   echo "To $(ifconfig en1 |grep ether | tr -d '\t')"
}

function whoisthis () {
   whois -h v4.whois.cymru.com " -v -u $1"
}

function zonetransfer () {
   dnsrecon.py -d $1 -t axfr
}

function ilookup () {
   if  valid_ip $1;
   then
       __IP=`dig +short $1 | head -n 1`
   else
       __IP=$1
   fi
      echo $__IP
      whoisthis $__IP
      echo .
      tdsips $__IP 

}

function tdsips () {
   if ! valid_ip $1;
   then
      TMPP=`whois -h whois.ripe.net $1 | grep origin: | cut -d ' ' -f 10 | head -1 | tr '[:upper:]' '[:lower:]'`
   else
      IP=`dig +short $1`
      TMPP=`whois -h whois.ripe.net $IP | grep origin: | cut -d ' ' -f 10 | head -1 | tr '[:upper:]' '[:lower:]'`
   fi

      #whois -h whois.radb.net " -i origin -T route $TMPP "  | grep -w 'route:' | awk '{print $NF}'
      asn2ip $TMPP
}
function asn2ip () {
   
      whois -h whois.radb.net \!g$1 | grep "\/" | tr ' ' '\n'
}
function sprips () {
   for i in `cat $1`
   do
      prips $i
   done

}

function valid_ip()
{
    local  ip=$1
    local  stat=0

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
       stat=1
        
    fi
    return $stat
}

function whoisdes () {
   A=`whois $1 | grep OrgName | head -n 1 | cut -d':' -f2 | tr -d ' '`
   echo $A
   }
   function masswhois () {
   for i in `cat $1`
      do
         XCRA=`whoisdes $i`
         echo $i $XCRA
      done

}

function faxfr() {
   cat $1 | awk '{if ( $4 ~ /[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/) print $3" "$4; }' 
}
function massmtr() {
   for i in `cat $1` 
   do
      sudo mtr -c 100 --report $i > $i.txt
   done
}

function massmetrics() {
   for i in `cat $1` 
   do
      httpmetrics $i > $i.http.txt 
      httpsmetrics $i > $i.https.txt 
   done
}

function massperf() {
   for i in `cat $1` 
   do
      echo "Dominio  $i"
      httperf --server=$i --port=80 --uri=/ --num-calls=100 --num-conns=5 > $i.httperf.txt 
      ab -n 500 -c 5 -g $i.http.plot -e $i.http.csv http://$i/
      chk=`checkport $i 443`
      if $chk -eq "0"; then
         ab -n 500 -c 5 -g $i.https.plot -e $i.https.csv https://$i/
      fi
   done
}
function checkport () {
   nc $1 $2 < /dev/null; echo $?
}


function valida_ips() {
# Validar ips apartir de um ficheiro para ter a certeza que nao se foge do isp
   _CNT=`wc -l $1`
   echo "A preparar a validacao de $_CNT IPs para o $2"
   cat $1 | parallel -k -j200 --progress __ipinasn {} $2 
}

function __ipinasn() {
   #funcao para parelizar a verificacao dos asn
   local __TMPP=`whois -h whois.ripe.net $1 | grep $2`
   if [[ -z "$__TMPP"  ]]
   then
      echo "[!] $1 nao pertence a $2"
   fi
}


function getip() {
dig $1 +short
}

function gettitulo () {

   Cont=$(wget -qO- "http://$1/" | gawk -v IGNORECASE=1 -v RS='</title' 'RT{gsub(/.*<title[^>]*>/,"");print;exit}')
   printf "$1 $Cont\n"

}
function masstitulo() {
   for i in `cat $1` 
   do
      gettitulo $i >> $1.titulos
   done
}
function badpanda () {
   for ((i=0;i<600;i++)); do echo "key=$i"| nc $1 8082; done > /dev/null 2>&1 
}
function dns-brute () {
   if [ ! -d "./dns" ]; then
      mkdir dns
   fi
   dnsenum -o dns/$1.xml --threads 10 -f ~/wordlists/subdominios/FINAL.wl $1
}
function basic-http () {
   cwd=`pwd`
   if [ ! -d "./nikto" ]; then
      mkdir nikto
   fi
   case "$1" in
      ssl)
         nikto -h https://$2/ -output $cwd/nikto/$2.txt -F txt
         ;;
      man)
         nikto -h $2 -output $cwd/nikto/$2.txt -F txt
         ;;
      *)
         nikto -h http://$1/ -output $cwd/nikto/$1.txt -F txt
         ;;
   esac
}
function nmap-this () {
   if [ ! -d "./scans" ]; then
      mkdir scans
   fi
   case "$1" in
      tcp4)
         sudo nmap -sSV -p- -n -Pn -vv -oA scans/local_findmore -T4 $2
         ;;
      tcp3)
         sudo nmap -sSV -p- -n -Pn -vv -oA scans/local_findmore -T3 $2
         ;;
      tcpl)
         sudo nmap -sSV -p- -n -Pn -vv -oA scans/local_findmore -T4 -iL $2
         ;;
   esac
}
